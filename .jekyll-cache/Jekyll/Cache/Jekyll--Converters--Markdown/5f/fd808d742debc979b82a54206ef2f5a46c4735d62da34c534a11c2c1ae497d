I"þN<h1 id="statistical-hw2">Statistical HW2</h1>

<h2 id="1-covariance-and-correlation"><strong>#1: COVARIANCE AND CORRELATION</strong></h2>

<h3 id="code">code:</h3>

<pre><code class="language-C++">{
    TFile* f1 = new TFile("exercise_01.root");
    TNtupleD* nt = (TNtupleD*)f1-&gt;Get("nt");

    double mean_x = 0., mean_y = 0., mean_z = 0;
    double cov_xx = 0.,cov_xy = 0.,cov_yy = 0.,cov_xz = 0.,cov_yz = 0.,cov_zz = 0.;
    for(int i=0; i&lt;nt-&gt;GetEntries(); i++) {
        nt-&gt;GetEntry(i);
        double x = nt-&gt;GetArgs()[0];
        double y = nt-&gt;GetArgs()[1];
        double z = nt-&gt;GetArgs()[2];
        mean_x += x;
        mean_y += y;
        mean_z += z;
        cov_xx += x*x;
        cov_yy += y*y;
        cov_zz += z*z;
        cov_xy += x*y;
        cov_xz += x*z;
        cov_yz += y*z;
    }

    mean_x /= nt-&gt;GetEntries();
    mean_y /= nt-&gt;GetEntries();
    mean_z /= nt-&gt;GetEntries();

    cov_xx = cov_xx/nt-&gt;GetEntries() - mean_x*mean_x;
    cov_yy = cov_yy/nt-&gt;GetEntries() - mean_y*mean_y;
    cov_zz = cov_zz/nt-&gt;GetEntries() - mean_z*mean_z;
    cov_xy = cov_xy/nt-&gt;GetEntries() - mean_x*mean_y;
    cov_xz = cov_xz/nt-&gt;GetEntries() - mean_x*mean_z;
    cov_yz = cov_yz/nt-&gt;GetEntries() - mean_y*mean_z;

    double sigma_x=0., sigma_y=0., sigma_z=0.;
    sigma_x = sqrt(cov_xx);
    sigma_y = sqrt(cov_yy);
    sigma_z = sqrt(cov_zz);
    double corr_xx = 0., corr_xy=0., corr_xz=0., corr_yy = 0., corr_yz=0., corr_zz=0.;
    corr_xx = cov_xx /(sigma_x *sigma_x );
    corr_yy = cov_yy /(sigma_y *sigma_y );
    corr_zz = cov_zz /(sigma_z *sigma_z );
    corr_xy = cov_xy /(sigma_x *sigma_y );
    corr_yz = cov_yz /(sigma_y *sigma_z );
    corr_xz = cov_xz /(sigma_x *sigma_z );

    cout&lt;&lt;"Covariance matrix:"&lt;&lt;endl;
	cout&lt;&lt;setw(12)&lt;&lt;showpoint&lt;&lt;left&lt;&lt;cov_xx&lt;&lt;setw(12)&lt;&lt;cov_xy&lt;&lt;setw(12)&lt;&lt;cov_xz&lt;&lt;endl;
	cout&lt;&lt;setw(12)&lt;&lt;showpoint&lt;&lt;left&lt;&lt;cov_xy&lt;&lt;setw(12)&lt;&lt;cov_yy&lt;&lt;setw(12)&lt;&lt;cov_yz&lt;&lt;endl;
	cout&lt;&lt;setw(12)&lt;&lt;showpoint&lt;&lt;left&lt;&lt;cov_xz&lt;&lt;setw(12)&lt;&lt;cov_yz&lt;&lt;setw(12)&lt;&lt;cov_zz&lt;&lt;endl;

	cout&lt;&lt;"Correlation matrix:"&lt;&lt;endl;
    cout&lt;&lt;setw(12)&lt;&lt;showpoint&lt;&lt;left&lt;&lt;corr_xx&lt;&lt;setw(12)&lt;&lt;corr_xy&lt;&lt;setw(12)&lt;&lt;corr_xz&lt;&lt;endl;
    cout&lt;&lt;setw(12)&lt;&lt;showpoint&lt;&lt;left&lt;&lt;corr_xy&lt;&lt;setw(12)&lt;&lt;corr_yy&lt;&lt;setw(12)&lt;&lt;corr_yz&lt;&lt;endl;
    cout&lt;&lt;setw(12)&lt;&lt;showpoint&lt;&lt;left&lt;&lt;corr_xz&lt;&lt;setw(12)&lt;&lt;corr_yz&lt;&lt;setw(12)&lt;&lt;corr_zz&lt;&lt;endl;
}
</code></pre>

<h3 id="result">result:</h3>

<pre><code class="language-C++">Covariance matrix:
+3.00245    |-0.0130546  |+0.000642827
-0.0130546  |+5.04136    |-0.00218067
+0.000642827|-0.00218067 |+0.997575
Correlation matrix:
+1.00000    |-0.00335547 |+0.000371435
-0.00335547 |+1.00000    |-0.000972396
+0.000371435|-0.000972396|+1.00000
</code></pre>

<h2 id="2-verify-the-case-of-poisson--binomial">#2: VERIFY THE CASE OF POISSON âŠ— <strong>BINOMIAL</strong></h2>

<h3 id="code-1">code:</h3>

<pre><code class="language-C++">{
    TRandom3 rnd;

    double count_sum = 0;
    double count_avg = 0;
    double p = 0;

    for (int j=0; j&lt;10000; j++){
        int count = 0;
        for (int i=0; i&lt;100; i++)
            if (rnd.Uniform()&lt;0.1) count++;
        count_sum += count;
    }
    count_avg = count_sum / 10000;
    p = count_avg / 100;
    var = 100 * p;
    cout &lt;&lt; "variance =" &lt;&lt; var &lt;&lt; endl;
}
</code></pre>

<h3 id="result-1">result:</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>variance =9.9843
</code></pre></div></div>

<h2 id="3-central-limit-theorem"><strong>#3: CENTRAL LIMIT THEOREM</strong></h2>

<h3 id="code-2">code:</h3>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="nf">var</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">){</span>
    <span class="n">TRandom3</span> <span class="n">rnd</span><span class="p">;</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="mi">1</span> <span class="p">:</span>
            <span class="k">return</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Poisson</span><span class="p">(</span><span class="mf">5.0</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">2</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Binomial</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">3</span> <span class="p">:</span>
            <span class="k">return</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Binomial</span><span class="p">(</span><span class="mi">190</span><span class="p">,</span><span class="mf">0.3</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="nl">default:</span>
			<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span>  <span class="nf">hw2_3</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">TRandom3</span> <span class="n">rnd</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">NFILL</span> <span class="o">=</span> <span class="mi">10000</span><span class="p">;</span>

    <span class="n">TCanvas</span> <span class="o">*</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TCanvas</span><span class="p">(</span><span class="s">"c"</span><span class="p">,</span><span class="s">"c"</span><span class="p">,</span><span class="mi">1600</span><span class="p">,</span><span class="mi">800</span><span class="p">);</span>
    <span class="n">c1</span><span class="o">-&gt;</span><span class="n">Divide</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>

    <span class="n">TH1D</span> <span class="o">*</span><span class="n">h1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TH1D</span><span class="p">(</span><span class="s">"h1"</span><span class="p">,</span><span class="s">"3 random variable"</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">20</span><span class="p">);</span>
	<span class="n">TH1D</span> <span class="o">*</span><span class="n">h2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TH1D</span><span class="p">(</span><span class="s">"h2"</span><span class="p">,</span><span class="s">"10 random variable"</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">50</span><span class="p">);</span>
	<span class="n">TH1D</span> <span class="o">*</span><span class="n">h3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TH1D</span><span class="p">(</span><span class="s">"h3"</span><span class="p">,</span><span class="s">"100 random variable"</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">150</span><span class="p">,</span><span class="mi">400</span><span class="p">);</span>
	<span class="n">TH1D</span> <span class="o">*</span><span class="n">h4</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TH1D</span><span class="p">(</span><span class="s">"h4"</span><span class="p">,</span><span class="s">"1000 random variable"</span><span class="p">,</span><span class="mi">300</span><span class="p">,</span><span class="mi">2200</span><span class="p">,</span><span class="mi">3200</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NFILL</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">//h1</span>
        <span class="kt">int</span> <span class="n">n1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Uniform</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
            <span class="n">n1</span> <span class="o">+=</span> <span class="n">var</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">h1</span><span class="o">-&gt;</span><span class="n">Fill</span><span class="p">(</span><span class="n">n1</span><span class="p">);</span>
        <span class="c1">//h2</span>
        <span class="kt">int</span> <span class="n">n2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">10</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Uniform</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
            <span class="n">n2</span> <span class="o">+=</span> <span class="n">var</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">h2</span><span class="o">-&gt;</span><span class="n">Fill</span><span class="p">(</span><span class="n">n2</span><span class="p">);</span>
        <span class="c1">//h3</span>
        <span class="kt">int</span> <span class="n">n3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">100</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Uniform</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
            <span class="n">n3</span> <span class="o">+=</span> <span class="n">var</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">h3</span><span class="o">-&gt;</span><span class="n">Fill</span><span class="p">(</span><span class="n">n3</span><span class="p">);</span>
        <span class="c1">//h4</span>
        <span class="kt">int</span> <span class="n">n4</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">1000</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Uniform</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
            <span class="n">n4</span> <span class="o">+=</span> <span class="n">var</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">h4</span><span class="o">-&gt;</span><span class="n">Fill</span><span class="p">(</span><span class="n">n4</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">h1</span><span class="o">-&gt;</span><span class="n">SetNormFactor</span><span class="p">();</span>
    <span class="n">h2</span><span class="o">-&gt;</span><span class="n">SetNormFactor</span><span class="p">();</span>
    <span class="n">h3</span><span class="o">-&gt;</span><span class="n">SetNormFactor</span><span class="p">();</span>
    <span class="n">h4</span><span class="o">-&gt;</span><span class="n">SetNormFactor</span><span class="p">();</span>
    <span class="n">c1</span><span class="o">-&gt;</span><span class="n">cd</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">h1</span><span class="o">-&gt;</span><span class="n">Draw</span><span class="p">();</span>
    <span class="n">c1</span><span class="o">-&gt;</span><span class="n">cd</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="n">h2</span><span class="o">-&gt;</span><span class="n">Draw</span><span class="p">();</span>
    <span class="n">c1</span><span class="o">-&gt;</span><span class="n">cd</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
    <span class="n">h3</span><span class="o">-&gt;</span><span class="n">Draw</span><span class="p">();</span>
    <span class="n">c1</span><span class="o">-&gt;</span><span class="n">cd</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
    <span class="n">h4</span><span class="o">-&gt;</span><span class="n">Draw</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="plot">plot:</h3>

<p><img src="img/hw2_3.svg" alt="" /></p>

<h2 id="4-sumdiff-of-gaussians-ratio-of-gaussians"><strong>#4: SUM/DIFF OF GAUSSIANS, RATIO OF GAUSSIANS</strong></h2>

<h3 id="code-3">codeï¼š</h3>

<pre><code class="language-C++">{
    TRandom3 rnd;
    const int NFILL = 10000;

    TCanvas * c1 = new TCanvas("c","c",1600,800);
    c1-&gt;Divide(3,2);

    TH1D *h1 = new TH1D("h1","X",100,0,50);
    TH1D *h2 = new TH1D("h2","Y",100,0,30);
    TH1D *h3 = new TH1D("h3","X+Y",100,0,80);
    TH1D *h4 = new TH1D("h4","X-Y",100,0,30);
    TH1D *h5 = new TH1D("h5","X/Y",100,0,5);
    TH1D *h6 = new TH1D("h6","X/Y, Y_mean = 0",100,-100,100);

    for (size_t i = 0; i &lt; NFILL; i++) {
        int n1 = rnd.Gaus(25, 4);
        h1-&gt;Fill(n1);
        int n2 = rnd.Gaus(15, 3);
        h2-&gt;Fill(n2);
        int n3 = rnd.Gaus(25, 4)+rnd.Gaus(15, 3);
        h3-&gt;Fill(n3);
        int n4 = rnd.Gaus(25, 4)-rnd.Gaus(15, 3);
        h4-&gt;Fill(n4);
        int n5 = rnd.Gaus(25, 4)/rnd.Gaus(15, 3);
        h5-&gt;Fill(n5);
        int n6 = rnd.Gaus(25, 4)/rnd.Gaus(0, 3);
        h6-&gt;Fill(n6);
    }
    c1-&gt;cd(1);
    h1-&gt;Draw();
    c1-&gt;cd(2);
    h2-&gt;Draw();
    c1-&gt;cd(3);
    h3-&gt;Draw();
    c1-&gt;cd(4);
    h4-&gt;Draw();
    c1-&gt;cd(5);
    h5-&gt;Draw();
    c1-&gt;cd(6);
    h6-&gt;Draw();
}
</code></pre>

<h3 id="plot-1">plot:</h3>

<p><img src="img/hw2_4.svg" alt="" /></p>

<h2 id="5-draw-a-2d-contour"><strong>#5: DRAW A 2D CONTOUR</strong></h2>

<h3 id="code-4">code:</h3>

<pre><code class="language-C++">double fcn(double x, double y) {
    const double data[50] = {
        0.9997,0.1629,0.2826,0.9472,0.2317,0.4850,0.9575,0.7443,0.5400,0.7400,
        0.7599,0.6586,0.3156,0.8044,0.5197,0.1686,0.4755,0.3923,0.2217,0.2132,
        0.0303,0.3335,0.1941,0.9437,0.5799,0.8983,0.6656,0.4986,0.5606,0.1823,
        0.2965,0.1174,0.0629,0.6481,0.7254,0.6371,0.7139,0.0996,0.6993,0.1078,
        0.1292,0.5024,0.2078,0.2889,0.0832,0.1281,0.5474,0.0823,0.2921,0.8916};
    double f = 0.;
    for (int i=0; i&lt;50; i++) {
        double p = x*y*pow(1.-data[i],2)+
        (1.-x)*y*2.*data[i]*(1.-data[i])+
        (1.-y)*2.*pow(data[i],2);
        f += log(p);
    }
    return -2.*f;
}

void hw2_5()
{
    TF2 *f = new TF2("f","fcn(x,y)",0,1,0,1);
    f-&gt;Draw();
}
</code></pre>

<h3 id="plot-2">plot:</h3>

<p><img src="img/hw2_5.svg" alt="2.5" /></p>

<h2 id="6-build-up-an-exponential"><strong>#6: BUILD UP AN EXPONENTIAL</strong></h2>

<h3 id="code-5">code:</h3>

<pre><code class="language-C++">{
    TRandom rnd;

    TH1D * h1 = new TH1D("h1","# of white ball between success",100,0,500);
    int Rcount = 0;
    int Wcount = 0;

    for (size_t i = 0; i &lt; 1000000; i++) {
        int Bcount = 0;
        if (rnd.Uniform()&lt;0.01) {
            Rcount ++;
            Bcount += Wcount;
            Wcount = 0;
            h1-&gt;Fill(Bcount);
        }
        else Wcount ++;
    }
    h1-&gt;Draw();

    return 0;
}
</code></pre>

<h3 id="plot-3">plot:</h3>

<p><img src="img/hw2_6.svg" alt="2.6" /></p>

<h2 id="7-chebyshev-polynomials"><strong>#7: CHEBYSHEV POLYNOMIALS</strong></h2>

<h3 id="code-6">code:</h3>

<pre><code class="language-C++">double func(int n, double x){
    return TMath::Cos(n*TMath::ACos(x));
}
double Tre(int n, double x){
    if (n&gt;=2)
        return 2*x*Tre(n-1,x)-Tre(n-2,x);
    else if (n == 1)
        return x;
    else if (n == 0)
        return 1;
}

void hw2_7(){
    TRandom3 rnd;
    double x = rnd.Uniform(0,1);
    cout&lt;&lt;"x is a random number in [0,1]"&lt;&lt;endl;

    cout&lt;&lt;"recurrence relation"&lt;&lt;"   trigonometric definition"&lt;&lt;endl;

    for (size_t i = 0; i &lt; 10; i++) {
        cout&lt;&lt;showpoint&lt;&lt;"Tre("&lt;&lt;i&lt;&lt;") = "&lt;&lt;Tre(i,x)&lt;&lt;"  ==  ";
        cout&lt;&lt;"func("&lt;&lt;i&lt;&lt;") = "&lt;&lt;func(i,x)&lt;&lt;endl;
    }
}
</code></pre>

<h3 id="result-2">result:</h3>

<pre><code class="language-C++">x is a random number in [0,1]
recurrence relation   trigonometric definition
Tre(0) = 1.00000   ==  func(0) = 1.00000
Tre(1) = 0.999742  ==  func(1) = 0.999742
Tre(2) = 0.998967  ==  func(2) = 0.998967
Tre(3) = 0.997677  ==  func(3) = 0.997677
Tre(4) = 0.995871  ==  func(4) = 0.995871
Tre(5) = 0.993550  ==  func(5) = 0.993550
Tre(6) = 0.990717  ==  func(6) = 0.990717
Tre(7) = 0.987372  ==  func(7) = 0.987372
Tre(8) = 0.983517  ==  func(8) = 0.983517
Tre(9) = 0.979154  ==  func(9) = 0.979154
</code></pre>

<h2 id="8-smeared-distribution"><strong>#8: SMEARED DISTRIBUTION</strong></h2>

<h3 id="code-7">code:</h3>

<pre><code class="language-C++">{
    TRandom3 rnd;
    TH1D *h1 = new TH1D("h1","y distribution", 100, 0, 10);

    for (int i=0; i&lt;10000; i++){
        double x = rnd.Exp(1.6);
        double y = rnd.Gaus(x,0.2);
        h1-&gt;Fill(y);
    }
    h1-&gt;Draw();
}
</code></pre>

<h3 id="plot-4">plot:</h3>

<p><img src="img/hw2_8.svg" alt="2.8" /></p>
:ET